runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
x <- c(1,2,3)
x(1)
x[1]
x[[1]
]
as.integer(x[1])
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
college.data1 <- read.csv("D:\\Program File\\Git\\info201\\info201-team1-finalproject\\data\\data.csv", header = TRUE)
View(college.data1)
college.data1[college.data1[,3]=="AK"]
college.data1[college.data1[,3]=="AK"]
college.data1[,3]
college.data1[college.data1[,3]=="AK"]
college.data1[,college.data1[,3]=="AK"]
college.data1[,college.data1[,3] in c("AK")]
college.data1[,college.data1[,3] %in% c("AK")]
college.data1[college.data1[,3] %in% c("AK")]
college.data1[college.data1[,3] == c("AK")]
college.data1[as.character(college.data1[,3]) == "AK"]
college.data1[,3]
college.data1[,3]=="AK"
college.data1[college.data1[,3]=="AK"]
college.data1[college.data1[,3]=="AK",]
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
x <- c("A","A","B","B")
combn(x)
combn(x,4)
sample(x,4)
sample(x,4)
sample(x1,4)
sample(x,4)
sample(x,4)
sample(x,4)
sample(x,4)
sample(x,4)
sample(x,4)
x1[x1=="A"]
x[x=="A"]
x1 <- c("A","A","B","B")
x2 <- c("A","A","B","B")
y1 <- c(3.0,3.8,4.5,3.7)
y2 <- c(3.3,3.9,4.4,4.8)
y1[x1=="A"]
y1[sample(x1,4)=="A"]
x1 <- c("A","A","B","B")
x2 <- c("A","A","B","B")
y1 <- c(3.0,3.8,4.5,3.7)
y2 <- c(3.3,3.9,4.4,4.8)
data <- rep(0,1000)
for (i in 1:1000) {
temp1 <- sample(x1,4)
temp2 <- sample(x2,4)
a.bar <- mean(y1[temp1=="A"],y2[temp2=="A"])
b.bar <- mean(y1[temp1=="B"],y2[temp2=="B"])
data[i] <- abs(a.bar-b.bar)
}
x1 <- c("A","A","B","B")
x2 <- c("A","A","B","B")
y1 <- c(3.0,3.8,4.5,3.7)
y2 <- c(3.3,3.9,4.4,4.8)
data <- rep(0,1000)
for (i in 1:1000) {
temp1 <- sample(x1,4)
temp2 <- sample(x2,4)
a.bar <- mean(c(y1[temp1=="A"],y2[temp2=="A"]))
b.bar <- mean(c(y1[temp1=="B"],y2[temp2=="B"]))
data[i] <- abs(a.bar-b.bar)
}
t.obs <- abs(mean(c(y1[x1=="A"],y2[x2=="A"])) - mean(c(y1[x1=="B"],y2[x2=="B"])))
mean(data>t.obs)
hist(data)
shiny::runApp('D:/Program File/Git/info201/info201-team1-finalproject')
install.packages("leaflet")
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
View(college.data1)
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
runApp('D:/Program File/Git/info201/info201-team1-finalproject')
data.frame(plot = c(0,0,0,0,1,1,1,1), irrigation = c("A","A","B","B","A","A","B","B"), data = c(3.0,3.8,4.5,3.7,3.3,3.9,4.4,4.8))
plot <- c(0,0,0,0,1,1,1,1)
irrigation <- c("A","A","B","B","A","A","B","B")
grass.weight <- c(3.0,3.8,4.5,3.7,3.3,3.9,4.4,4.8)
model <- anova(lm(grass.weight~plot+irrigation))
summary(model)
model
library(ggplot2)
qqnorm(model$residuals)
model <- aov(lm(grass.weight~plot+irrigation))
model
qqnorm(model$residuals)
qqline(model$residuals)
## ------------------------------------------------------------------------
e <- c(1, 3, 8)
e
## ------------------------------------------------------------------------
x <- c(1,2,3,4)        # numeric ------ to check, type "class(x)"
x
y <- c(TRUE, FALSE)    # logical
y
z <- c("hey","yo")     # character
z
## ------------------------------------------------------------------------
rm(list = ls(all = TRUE))
## ------------------------------------------------------------------------
x <- c(1,2,3,4)
y <- c(TRUE, FALSE)
z <- c(4,3,2,1)
rm(list = ls(all = TRUE))
z <- c("hey","yo")     # character
z
## ------------------------------------------------------------------------
rm(list = ls(all = TRUE))
x <- c(1,2,3,4)
y <- c(TRUE, FALSE)
z <- c(4,3,2,1)
## ---- results="hide"-----------------------------------------------------
class(x)
is.vector(x)
names(x) <- c("one", "two", "three", "four")
x
## ---- results="hide"-----------------------------------------------------
x[1]
x["one"]
x[-c(2:4)]
x[x == 1]
## ---- results="hide"-----------------------------------------------------
mean(x)
sum(x)
length(x)
prod(x)
var(x)
sd(x)
min(x); max(x) #you can use a semi colon to have multiple commands on the same line.
data(coronary)
data(coronary)
iris
install.packages("bnlearn")
library(bnlearn)
data(coronary)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res
View(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
fittedbn
print(fittedbn$Proteins)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
View(bn_df)
View(coronary)
View(bn_df)
install.packages('alr4')
snake
library(ggplot2)
library(dplyr)
library(alr4)
data(snake)
df.data2 <- data(snake)
df.data2
snake
df.data2 <- snake
test <- lm(snake$Y~snake$X)
tes
test
summary(test)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
length(snake)-2
nrow(snake)-2
sigma2 <- RSS/(nrow(snake)-2)
x.bar <- mean(snake$X)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
sigma2 <- RSS/(nrow(snake)-2)
SEB1 <- sigma2/(SXX^(1/2))
SEB0 <- sigma2*((1/nrow(snake)+(x.bar^2)/SXX)^(1/2))
r2 <- (SXY^2)/(SXX*SYY)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
SEB1 <- sigma2/(SXX^(1/2))
SEB0 <- sigma2*((1/nrow(snake)+(x.bar^2)/SXX)^(1/2))
r2 <- (SXY^2)/(SXX*SYY)
t1.2 <- (B0 - 0)/SEB0
p1.2 <- 2*pt(-abs(t.12), df=nrow(snake)-2)
p1.2 <- 2*pt(-abs(t1.2), df=nrow(snake)-2)
t1.3 <- (B1-0)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=nrow(snake)-2)
((SXY^2)/SXX)/sigma2
B1/SEB1
(B1/SEB1)^2
(SXY^2)/SXX
RSS <- SYY - (SXY^2)/SXX
RSS
1.553^2
SXX^(1/2)
sqrt(SXX)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
sigma2 <- RSS/(nrow(snake)-2)
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
covB1B0 <- -sigma2*(x.bar/SXX)
t1.2 <- (B0 - 0)/SEB0
p1.2 <- 2*pt(-abs(t1.2), df=nrow(snake)-2)
t1.3 <- (B1-0)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=nrow(snake)-2)
((SXY^2)/SXX)/sigma2
SYY - (SXY^2)/SXX
(SXY^2)/SXX
((SXY^2)/SXX)/sigma
((SXY^2)/SXX)/sigma2
summary(test)
resid(test)
sqrt(SXX)
sqrt(sigma2)
B1/SEB1
RSS/15
t1.3^2
sqrt(101.2)
snake$X - x.bar
(snake$X - x.bar)*(snake$Y - y.bar)
test
test$residuals
test$df.residual
SYY <- sum((snake$Y - y.bar)*(snake$Y - y.bar))
SXY <- sum((snake$X - x.bar)*(snake$Y - y.bar))
SXX <- sum((snake$X - x.bar)*(snake$X - x.bar))
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
t1.2 <- (B0)/SEB0
SEB1 <- sigma2/(sqrt(SXX))
SEB1 <- sigma2/(sqrt(SXX))
SEB1 <- sqrt(sigma2)/(sqrt(SXX))
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SXY <- sum((snake$X - x.bar)*(snake$Y - y.bar))
SXX <- sum((snake$X - x.bar)*(snake$X - x.bar))
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
sigma2 <- RSS/(15)
SEB1 <- sqrt(sigma2)/(sqrt(SXX))
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
covB1B0 <- -sigma2*(x.bar/SXX)
t1.2 <- (B0)/SEB0
p1.2 <- 2*pt(-abs(t1.2), df=15)
t1.3 <- (B1)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=15)
summary(test)
lm.snake <- lm(snake$Y~snake$X)
lm.snake0 <- lm(snake$Y~0+snake$X)
summary(lm.snake0)
summary(lm.snake)
sqrt(sigma2)
summary(lm.snake0)
lm.snake0$coefficients
lm.snake0$coefficients[1]
lm.snake0$fitted.values
lm.snake0$terms
summary(lm.snake0)
qt(1,1)
qt(.975,2)
qt(.975,1000)
qt(.975,15)
plot(lm.snake0)
plot(lm.snake0)[1]
plot(lm.snake0,which=1)
plot(lm.snake0,which=1)
library(ggplot2)
library(dplyr)
library(alr4)
df.data <- read.csv('hw2listings.csv',header = TRUE)
mean(df.data$review_scores_rating)
df.data$review_scores_rating
mean(df.data$review_scores_rating, na.rm = TRUE)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
dm.lm4 <- model.matrix((lm.4))
lm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%dm.lm4)$values
dm.lm4.values
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
avPlots(lm1.2, ~WT9)
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~WT9+LG9,data=df.p1)
aov1.4 <- anova(lm1.2)
aov1.5 <- anova(lm1.2)
summary(aov1.4)
aov1.4
aov1.5
aov1.5 <- anova(lm1.3)
aov1.5
aov1.5
avPlots(lm1.2, ~WT9)
aov1.4
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
plot(x1,y)
avPlots(lm1.2, ~WT9, main="Added")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov1 <- anova(lm1)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov2.2 <- anova(lm1)
aov2.2
library(data.table)
library(dplyr)
equalWidth <- function(n, df) {
for (i in 1:n) {
quantile(df, c(seq(0, 1, by=1/n)))[i+1]
df[(df>=quantile(df, c(seq(0, 1, by=1/n)))[i]) & (df<=quantile(df, c(seq(0, 1, by=1/n)))[i+1])] <- i
}
return(df)
}
df.sa <- fread('data\\new\\SA.csv', header = T, sep=',',na.strings=c(""))
df.carrier <- fread('data\\new\\CARRIER.csv', header = T, sep=',',na.strings=c(""))
df.cargo <- fread('data\\new\\CARGO.csv', header = T, sep=',',na.strings=c(""))
df.driver <- fread('data\\new\\DRIVER.csv', header = T, sep=',',na.strings=c(""))
library(data.table)
library(bnlearn)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
library(alr4)
library(ggplot2)
library(knitr)
library(MASS)
library(boot)
df.1 <- salarygov
p <- ggplot(df.1, aes(x=NE, y=MaxSalary))
p + geom_point() + ggtitle("Max Salary depending on number of employees employed in each job class") + xlab("Number of Employees employed in job class") + ylab("Max Salary ($)")
df.2 <- stopping
p <- ggplot(df.2, aes(x=Speed, y=Distance))
p + geom_point() + ggtitle("Stopping distance depending on speed") + xlab("Speed (mph)") + ylab("Stopping Distance (feet)") + geom_smooth(method="lm", se=FALSE, color="red") +
geom_smooth(method = "lm", se = FALSE, formula= y ~ splines::bs(x,3))
lm2.2 <- lm(Distance~I(Speed^2),data=df.2)
plot(lm2.2,1)
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
summary(lm2.3)
library(ggmap)
library(ggplot2)
library(dplyr)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- select(df.data, id, price, host_response_rate, host_acceptance_rate, host_is_superhost,
host_listings_count, neighbourhood_cleansed, property_type, room_type,
accommodates, bathrooms, bedrooms, beds, guests_included,
availability_365, number_of_reviews, review_scores_accuracy, review_scores_checkin,
review_scores_cleanliness, review_scores_communication, review_scores_location,
review_scores_value, reviews_per_month)
#cleaning data
df.data$price <- as.numeric(substring(df.data$price,2))
df.data$host_response_rate <- as.numeric(ifelse(df.data$host_response_rate=="N/A",0,substr(df.data$host_response_rate, 1, nchar(df.data$host_response_rate)-1)))
df.data$host_acceptance_rate <- as.numeric(ifelse(df.data$host_acceptance_rate=="N/A",0,substr(df.data$host_acceptance_rate, 1, nchar(df.data$host_acceptance_rate)-1)))
df.data$host_is_superhost[df.data$host_is_superhost==""] <- "f"
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data$property_type <- factor(df.data$property_type)
df.data$room_type <- factor(df.data$room_type)
lm.airbnb <- lm(price~., data=df.data[,-1])
summary(lm.airbnb)
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
library(ggmap)
library(ggplot2)
library(dplyr)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- select(df.data, id, price, host_response_rate, host_acceptance_rate, host_is_superhost,
host_listings_count, neighbourhood_cleansed, property_type, room_type,
accommodates, bathrooms, bedrooms, beds, guests_included,
availability_365, number_of_reviews, review_scores_accuracy, review_scores_checkin,
review_scores_cleanliness, review_scores_communication, review_scores_location,
review_scores_value, reviews_per_month)
#cleaning data
df.data$price <- as.numeric(substring(df.data$price,2))
df.data$host_response_rate <- as.numeric(ifelse(df.data$host_response_rate=="N/A",0,substr(df.data$host_response_rate, 1, nchar(df.data$host_response_rate)-1)))
df.data$host_acceptance_rate <- as.numeric(ifelse(df.data$host_acceptance_rate=="N/A",0,substr(df.data$host_acceptance_rate, 1, nchar(df.data$host_acceptance_rate)-1)))
df.data$host_is_superhost[df.data$host_is_superhost==""] <- "f"
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data$property_type <- factor(df.data$property_type)
df.data$room_type <- factor(df.data$room_type)
lm.airbnb <- lm(price~., data=df.data[,-1])
summary(lm.airbnb)
hist(df.data$review_scores_location)
plot(df.data$review_scores_location)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
plot(df.data$minimum_nights)
summary(df.data$minimum_nights)
df.data$price <- as.numeric(substring(df.data$price,2))
summary(df.data$price*df.data$reviews_per_month)
summary(df.data$price*df.data$reviews_per_month*df.data$minimum_nights)
