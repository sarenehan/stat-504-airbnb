PWR_UNITS = AVG_POWER_UNIT,
MILES = MCS150_MILEAGE,
SA_RATING = RATING_OVERALL,
TOT_CDL = TOTAL_CDL)
df.carrier <- filter(df.carrier, !FACTOR1 == 0)
df.carrier$NE_CODE <- factor(df.carrier$NE_CODE)
df.carrier$SA_RATING <- factor(df.carrier$SA_RATING)
df.carrier$FACTOR1 <- factor(df.carrier$FACTOR1)
df.carrier$FACTOR2 <- factor(df.carrier$FACTOR2)
df.carrier$FACTOR3 <- factor(df.carrier$FACTOR3)
df.carrier$FACTOR4 <- factor(df.carrier$FACTOR4)
df.carrier$FACTOR5 <- factor(df.carrier$FACTOR5)
df.carrier$FACTOR6 <- factor(df.carrier$FACTOR6)
df.carrier$FOOD <- factor(df.carrier$FOOD)
df.carrier$PASSENGER <- factor(df.carrier$PASSENGER)
df.carrier$GENERAL <- factor(df.carrier$GENERAL)
df.carrier$VEHICLES <- factor(df.carrier$VEHICLES)
df.carrier$CONSTRUCTION <- factor(df.carrier$CONSTRUCTION)
df.carrier$SAFETY_RATING <- factor(df.carrier$SAFETY_RATING)
bn.1 <- empty.graph(colnames(df.carrier[,c(-1,-3,-20)]))
#Trimmed
#bn.1 <- empty.graph(colnames(df.carrier[,-c(1,2,3,4,13,20,32,31,28)]))
bn.1 <- set.arc(bn.1,"SA_RATING","NE_CODE")
bn.1 <- set.arc(bn.1,"SA_RATING","FACTOR2")
bn.1 <-set.arc(bn.1,"SA_RATING","FACTOR3")
bn.1 <-set.arc(bn.1,"SA_RATING","FACTOR4")
bn.1 <- empty.graph(colnames(df.carrier[,c(-1,-3,-20)]))
#Trimmed
#bn.1 <- empty.graph(colnames(df.carrier[,-c(1,2,3,4,13,20,32,31,28)]))
bn.1 <- set.arc(bn.1,"SA_RATING","NE_CODE")
bn.1 <- set.arc(bn.1,"SA_RATING","FACTOR1")
bn.1 <- set.arc(bn.1,"SA_RATING","FACTOR2")
bn.1 <-set.arc(bn.1,"SA_RATING","FACTOR3")
bn.1 <-set.arc(bn.1,"SA_RATING","FACTOR4")
bn.1 <- set.arc(bn.1,"SA_RATING","FACTOR5")
bn.1 <- set.arc(bn.1,"SA_RATING","FACTOR6")
bn.valid <- bn.cv(data=df.carrier[,c(-1,-3,-20)],bn.1, loss="pred-lw",
loss.args = list(target="SAFETY_RATING", from=c("NE_CODE","FACTOR1","FACTOR2",
"FACTOR3","FACTOR4","FACTOR5","FACTOR6")),
k=10, method="k-fold")
bn.valid <- bn.cv(data=df.carrier[,c(-1,-3,-20)],bn=bn.1, loss="pred-lw",
loss.args = list(target="SAFETY_RATING", from=c("NE_CODE","FACTOR1","FACTOR2",
"FACTOR3","FACTOR4","FACTOR5","FACTOR6")),
k=10, method="k-fold")
bn.valid <- bn.cv(data=df.carrier[,c(-1,-3,-20)],bn=bn.1, loss="pred-lw",
loss.args = list(target="SA_RATING", from=c("NE_CODE","FACTOR1","FACTOR2",
"FACTOR3","FACTOR4","FACTOR5","FACTOR6")),
k=10, method="k-fold")
OBS <- unlist(lapply(bn.valid, `[[`, "observed"))
PRED <- unlist(lapply(bn.valid, `[[`, "predicted"))
cv.table <- table(PRED, OBS)
SENSITIVITY <- cv.table[1,1]/(cv.table[1,1]+cv.table[2,1])
SPECIFCITY <- cv.table[2,2]/(cv.table[2,2]+cv.table[1,2])
PPV <- cv.table[2,2]/(cv.table[2,1]+cv.table[2,2])
NPV <- cv.table[1,1]/(cv.table[1,1]+cv.table[1,2])
cv.table
comb <- expand.grid(unique(df.carrier$NE_CODE),
unique(df.carrier$FACTOR2),
unique(df.carrier$FACTOR3),
unique(df.carrier$FACTOR4),
unique(df.carrier$FACTOR5),
unique(df.carrier$FACTOR6))
SA_F <- seq(1,nrow(comb))
SA_P <- seq(1,nrow(comb))
for (n in 1:nrow(comb)) {
SA_F[n] <- cpquery(fitted.bn, event=(SA_RATING=="F"), evidence = (
NE_CODE==as.character(comb[n,]$Var1) &
FACTOR2==as.character(comb[n,]$Var2) &
FACTOR3==as.character(comb[n,]$Var3) &
FACTOR4==as.character(comb[n,]$Var4) &
FACTOR5==as.character(comb[n,]$Var5) &
FACTOR6==as.character(comb[n,]$Var6)))
SA_P[n] <-cpquery(fitted.bn, event=(SA_RATING=="P"), evidence = (
NE_CODE==as.character(comb[n,]$Var1) &
FACTOR2==as.character(comb[n,]$Var2) &
FACTOR3==as.character(comb[n,]$Var3) &
FACTOR4==as.character(comb[n,]$Var4) &
FACTOR5==as.character(comb[n,]$Var5) &
FACTOR6==as.character(comb[n,]$Var6)))
}
comb$SA_F <- SA_F
comb$SA_P <- SA_P
comb <- rename(comb, New_Entrant_Code=Var1, Factor2=Var2,
Factor3=Var3, Factor4=Var4, Factor5=Var5,
Factor6=Var6, Safety_Audit_Pass=SA_P, Safety_Audit_Fail=SA_F)
fitted.bn <- bn.fit(bn.1, data=df.carrier[,-c(1,3,13,32,31,28)])
fitted.bn <- bn.fit(bn.1, data=df.carrier[,-c(1,3,13,32,31,28)])
fitted.bn <- bn.fit(bn.1, data=df.carrier[,-c(-1,-3,-20)])
fitted.bn <- bn.fit(bn.1, data=df.carrier[,-c(1,3,20)])
comb <- expand.grid(unique(df.carrier$NE_CODE),
unique(df.carrier$FACTOR2),
unique(df.carrier$FACTOR3),
unique(df.carrier$FACTOR4),
unique(df.carrier$FACTOR5),
unique(df.carrier$FACTOR6))
SA_F <- seq(1,nrow(comb))
SA_P <- seq(1,nrow(comb))
for (n in 1:nrow(comb)) {
SA_F[n] <- cpquery(fitted.bn, event=(SA_RATING=="F"), evidence = (
NE_CODE==as.character(comb[n,]$Var1) &
FACTOR2==as.character(comb[n,]$Var2) &
FACTOR3==as.character(comb[n,]$Var3) &
FACTOR4==as.character(comb[n,]$Var4) &
FACTOR5==as.character(comb[n,]$Var5) &
FACTOR6==as.character(comb[n,]$Var6)))
SA_P[n] <-cpquery(fitted.bn, event=(SA_RATING=="P"), evidence = (
NE_CODE==as.character(comb[n,]$Var1) &
FACTOR2==as.character(comb[n,]$Var2) &
FACTOR3==as.character(comb[n,]$Var3) &
FACTOR4==as.character(comb[n,]$Var4) &
FACTOR5==as.character(comb[n,]$Var5) &
FACTOR6==as.character(comb[n,]$Var6)))
}
comb$SA_F <- SA_F
comb$SA_P <- SA_P
comb <- rename(comb, New_Entrant_Code=Var1, Factor2=Var2,
Factor3=Var3, Factor4=Var4, Factor5=Var5,
Factor6=Var6, Safety_Audit_Pass=SA_P, Safety_Audit_Fail=SA_F)
View(comb)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
# setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
setwd('/Users/stewart/projects/stat-504-airbnb/data/');
# setwd("~/Documents/courses/504/stat-504-airbnb/data")
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type,
amenities, guests_included, minimum_nights, number_of_reviews)
## cleaning data
# Coerce columns into proper types
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
# setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
setwd('/Users/stewart/projects/stat-504-airbnb/data/');
# setwd("~/Documents/courses/504/stat-504-airbnb/data")
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type,
amenities, guests_included, minimum_nights, number_of_reviews)
## cleaning data
# Coerce columns into proper types
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
#setwd('/Users/stewart/projects/stat-504-airbnb/data/');
# setwd("~/Documents/courses/504/stat-504-airbnb/data")
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type,
amenities, guests_included, minimum_nights, number_of_reviews)
## cleaning data
# Coerce columns into proper types
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
lm.airbnb <- lm(price~., data=df.data)
summary(lm.airbnb)
plot(lm.airbnb$fitted.values, lm.airbnb$residuals) # Clear violation of constant variance
p <- ggplot(lm.airbnb, aes(x=fitted.values, y=residuals))
p + geom_hex()
lm.airbnb$fitted.values
lm.airbnb$residuals
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + geom_hex()
p + stat_binhex()
p + stat_binhex(colour="white")
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot")
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 487, 5703
plot(lm.airbnb, which=1)
plot(lm.airbnb$fitted.values,
lm.airbnb$residuals,
xlab="Fitted Values",
ylab="Residuals",
main="Residuals vs Fitted Values") # Clear violation of constant variance
boxcox(lm.airbnb)
boxcox(lm.airbnb, xlim=seq(-.5,.5))
boxcox(lm.airbnb, lambda = seq(-.5, .5, 1/10))
lm.airbnb=lm(log(price)~.,data=df.data)
summary(lm.airbnb)
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
d_cor <- as.matrix(cor(df.data))
d_cor <- as.matrix(cor(df.data[,c(1,8,9,10,11,13,14)]))
View(d_cor)
summary(df.data$smoke)
hist(df.data$price)
boxplot(df.data$price)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
#setwd('/Users/stewart/projects/stat-504-airbnb/data/');
# setwd("~/Documents/courses/504/stat-504-airbnb/data")
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type,
amenities, guests_included, minimum_nights, number_of_reviews)
## cleaning data
# Coerce columns into proper types
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
# Build model
lm.airbnb <- lm(price~., data=df.data)
summary(lm.airbnb)
plot(lm.airbnb$fitted.values, lm.airbnb$residuals) # Clear violation of constant variance
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
# Remove outliers
# Cooks distances
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 487, 5703
# 487 is removed because it only has 0.11 removed per month and costs $1307 per night.
# 5703 is removed because it has a minimum_nights value of 1000
bad_ids = c(487, 5703)
df.data = df.data[-bad_ids,]
# Remove points with minimum_nights > 15. These dont fall under the category of short term vacation
# rental.
df.data = df.data[df.data$minimum_nights <= 15,]
nrow(df.data)  # 11223
lm.airbnb <- lm(price~., data=df.data)
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 100, 595
# 100 seems normal, but cheap.
# 595 sems normal but more expensive. Stop here
plot(lm.airbnb, which=1)
plot(lm.airbnb$fitted.values,
lm.airbnb$residuals,
xlab="Fitted Values",
ylab="Residuals",
main="Residuals vs Fitted Values") # Clear violation of constant variance
##transformation
boxcox(lm.airbnb, lambda = seq(-.5, .5, 1/10))
##we can choose lambda =0 and transform price to log(price)
lm.airbnb=lm(log(price)~.,data=df.data)
summary(lm.airbnb)
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
p <- ggplot(df.data, aes( y=price))
p + geom_boxplot()
p <- ggplot(df.data, aes( y=price, group=1))
p + geom_boxplot()
p <- ggplot(df.data, aes(price, group=1))
p + geom_boxplot()
p <- ggplot(df.data, aes(y=price, group=1))
p + geom_boxplot()
p <- ggplot(df.data, aes(y=price, x=1))
p + geom_boxplot()
p <- ggplot(df.data, aes(y=price, x=neighbourhood_cleansed, group=neighbourhood_cleansed))
p + geom_boxplot()
p <- ggplot(df.data, aes(y=price, x=1))
p + geom_boxplot()
p + geom_boxplot() + ggtitle("Boxplot of price per night ($)")+ theme(plot.title = element_text(hjust = 0.5))
summary(df.data$wifi)
summary(df.data$neighbourhood_cleansed)
summary(df.data$property_type)
p <- ggplot(df.data, aes(y=log(price), x=1))
p + geom_boxplot() + ggtitle("Boxplot of price per night ($)")+ theme(plot.title = element_text(hjust = 0.5))
p <- ggplot(df.data, aes(y=log(price), x=neighbourhood_cleansed, group=neighbourhood_cleansed))
p + geom_boxplot() + ggtitle("Boxplot of price per night ($)")+ theme(plot.title = element_text(hjust = 0.5))
p + geom_boxplot() + ggtitle("Boxplot of price per night ($)")+ theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 90, hjust = 1))
