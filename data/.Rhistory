summary(lm.snake0)
lm.snake0$coefficients
lm.snake0$coefficients[1]
lm.snake0$fitted.values
lm.snake0$terms
summary(lm.snake0)
qt(1,1)
qt(.975,2)
qt(.975,1000)
qt(.975,15)
plot(lm.snake0)
plot(lm.snake0)[1]
plot(lm.snake0,which=1)
plot(lm.snake0,which=1)
library(ggplot2)
library(dplyr)
library(alr4)
df.data <- read.csv('hw2listings.csv',header = TRUE)
mean(df.data$review_scores_rating)
df.data$review_scores_rating
mean(df.data$review_scores_rating, na.rm = TRUE)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
dm.lm4 <- model.matrix((lm.4))
lm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%dm.lm4)$values
dm.lm4.values
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
avPlots(lm1.2, ~WT9)
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~WT9+LG9,data=df.p1)
aov1.4 <- anova(lm1.2)
aov1.5 <- anova(lm1.2)
summary(aov1.4)
aov1.4
aov1.5
aov1.5 <- anova(lm1.3)
aov1.5
aov1.5
avPlots(lm1.2, ~WT9)
aov1.4
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
plot(x1,y)
avPlots(lm1.2, ~WT9, main="Added")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov1 <- anova(lm1)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov2.2 <- anova(lm1)
aov2.2
library(data.table)
library(dplyr)
equalWidth <- function(n, df) {
for (i in 1:n) {
quantile(df, c(seq(0, 1, by=1/n)))[i+1]
df[(df>=quantile(df, c(seq(0, 1, by=1/n)))[i]) & (df<=quantile(df, c(seq(0, 1, by=1/n)))[i+1])] <- i
}
return(df)
}
df.sa <- fread('data\\new\\SA.csv', header = T, sep=',',na.strings=c(""))
df.carrier <- fread('data\\new\\CARRIER.csv', header = T, sep=',',na.strings=c(""))
df.cargo <- fread('data\\new\\CARGO.csv', header = T, sep=',',na.strings=c(""))
df.driver <- fread('data\\new\\DRIVER.csv', header = T, sep=',',na.strings=c(""))
library(data.table)
library(bnlearn)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
library(alr4)
library(ggplot2)
library(knitr)
library(MASS)
library(boot)
df.1 <- salarygov
p <- ggplot(df.1, aes(x=NE, y=MaxSalary))
p + geom_point() + ggtitle("Max Salary depending on number of employees employed in each job class") + xlab("Number of Employees employed in job class") + ylab("Max Salary ($)")
df.2 <- stopping
p <- ggplot(df.2, aes(x=Speed, y=Distance))
p + geom_point() + ggtitle("Stopping distance depending on speed") + xlab("Speed (mph)") + ylab("Stopping Distance (feet)") + geom_smooth(method="lm", se=FALSE, color="red") +
geom_smooth(method = "lm", se = FALSE, formula= y ~ splines::bs(x,3))
lm2.2 <- lm(Distance~I(Speed^2),data=df.2)
plot(lm2.2,1)
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
summary(lm2.3)
library(alr4)
library(faraway)
library(MASS)
clear()
data = readRDS("Quiz2Data.RDS")
pairs(data, pch=16, col=rgb(0,0,0,0.5))
install.packages("shinydashboard")
install.packages("plotly")
install.packages("timevis")
shiny::runApp('D:/Games/Downloads')
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
#setwd('/Users/stewart/projects/stat-504-airbnb/data/');
# setwd("~/Documents/courses/504/stat-504-airbnb/data")
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type,
amenities, guests_included, minimum_nights, number_of_reviews)
## cleaning data
# Coerce columns into proper types
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
# Build model
lm.airbnb <- lm(price~., data=df.data)
summary(lm.airbnb)
plot(lm.airbnb$fitted.values, lm.airbnb$residuals) # Clear violation of constant variance
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
# Remove outliers
# Cooks distances
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 487, 5703
# 487 is removed because it only has 0.11 removed per month and costs $1307 per night.
# 5703 is removed because it has a minimum_nights value of 1000
bad_ids = c(487, 5703)
df.data = df.data[-bad_ids,]
# Remove points with minimum_nights > 15. These dont fall under the category of short term vacation
# rental.
df.data = df.data[df.data$minimum_nights <= 15,]
nrow(df.data)  # 11223
lm.airbnb <- lm(price~., data=df.data)
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 100, 595
# 100 seems normal, but cheap.
# 595 sems normal but more expensive. Stop here
plot(lm.airbnb, which=1)
plot(lm.airbnb$fitted.values,
lm.airbnb$residuals,
xlab="Fitted Values",
ylab="Residuals",
main="Residuals vs Fitted Values") # Clear violation of constant variance
##transformation
boxcox(lm.airbnb, lambda = seq(-.5, .5, 1/10))
##we can choose lambda =0 and transform price to log(price)
lm.airbnb=lm(log(price)~.,data=df.data)
summary(lm.airbnb)
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
##variable selection
step(lm.airbnb)
##from the output of step, we exclude beds, host_acceptance_rate,review_scores_checkin, review_scores_communication.
# exhaustive variable selection
library(leaps)
rs<-summary(regsubsets(price~.,data=df.data, really.big = T))
plot(2:10,rs$cp,xlab="Numberofparameters",ylab="MallowsC_p") # Monotonically decreasing;
# Dont throw out any variables (and look for more to add)
drop=c('beds','host_acceptance_rate','review_scores_checkin','review_scores_communication')
df.data.drop=df.data[,!names(df.data)%in%drop]
lm.airbnd=lm(log(price)~.,data=df.data.drop[,-1])
anova(lm.airbnd)
plot(lm.airbnb,which=1)
summary(lm.airbnb)
# Feature importances
adjusted_r_squared_full = summary(lm.airbnd)$adj.r.squared
features.importances = c()
for (idx in seq(ncol(df.data.drop) - 2)) {
model.reduced = lm(log(price)~., data=df.data.drop[,-c(1, idx+2)]);
features.importances = c(features.importances,
adjusted_r_squared_full - summary(model.reduced)$adj.r.squared);
}
feature_names = c(
"Response Rate",
"Superhost",
"Listing Count",
"Neighborhood",
"Property Type",
"Room Type",
"Accommodates",
"Bathrooms",
"Bedrooms",
"Guests Incl.",
"Availability",
"No. Reviews",
"Accuracy",
"Cleanliness",
"Location Score",
"Value Score",
"Reviews / Month"
)
barplot(features.importances, names.arg = feature_names,
ylab = "Improvement to Adj R-Squared",
main = "Feature Importance",las=3)
lm.airbnb
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
#setwd('/Users/stewart/projects/stat-504-airbnb/data/');
# setwd("~/Documents/courses/504/stat-504-airbnb/data")
df.data <- read.csv('listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type,
amenities, guests_included, minimum_nights, number_of_reviews)
## cleaning data
# Coerce columns into proper types
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
# Build model
lm.airbnb <- lm(price~., data=df.data)
summary(lm.airbnb)
plot(lm.airbnb$fitted.values, lm.airbnb$residuals) # Clear violation of constant variance
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
# Remove outliers
# Cooks distances
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 487, 5703
# 487 is removed because it only has 0.11 removed per month and costs $1307 per night.
# 5703 is removed because it has a minimum_nights value of 1000
bad_ids = c(487, 5703)
df.data = df.data[-bad_ids,]
# Remove points with minimum_nights > 15. These dont fall under the category of short term vacation
# rental.
df.data = df.data[df.data$minimum_nights <= 15,]
nrow(df.data)  # 11223
lm.airbnb <- lm(price~., data=df.data)
cook = cooks.distance(lm.airbnb)
halfnorm(cook) # 100, 595
# 100 seems normal, but cheap.
# 595 sems normal but more expensive. Stop here
plot(lm.airbnb, which=1)
plot(lm.airbnb$fitted.values,
lm.airbnb$residuals,
xlab="Fitted Values",
ylab="Residuals",
main="Residuals vs Fitted Values") # Clear violation of constant variance
##transformation
boxcox(lm.airbnb, lambda = seq(-.5, .5, 1/10))
##we can choose lambda =0 and transform price to log(price)
lm.airbnb=lm(log(price)~.,data=df.data)
summary(lm.airbnb)
df.temp <- data.frame(fitted=lm.airbnb$fitted.values, residuals=lm.airbnb$residuals)
p <- ggplot(df.temp, aes(x=fitted, y=residuals))
p + stat_binhex(colour="white") + ggtitle("Residuals vs Fitted values plot") + theme(plot.title = element_text(hjust = 0.5))
##variable selection
step(lm.airbnb)
##from the output of step, we exclude beds, host_acceptance_rate,review_scores_checkin, review_scores_communication.
# exhaustive variable selection
library(leaps)
rs<-summary(regsubsets(price~.,data=df.data, really.big = T))
plot(2:10,rs$cp,xlab="Numberofparameters",ylab="MallowsC_p") # Monotonically decreasing;
# Dont throw out any variables (and look for more to add)
drop=c('beds','host_acceptance_rate','review_scores_checkin','review_scores_communication')
df.data.drop=df.data[,!names(df.data)%in%drop]
lm.airbnd=lm(log(price)~.,data=df.data.drop[,-1])
anova(lm.airbnd)
plot(lm.airbnb,which=1)
summary(lm.airbnb)
# Feature importances
adjusted_r_squared_full = summary(lm.airbnd)$adj.r.squared
features.importances = c()
for (idx in seq(ncol(df.data.drop) - 2)) {
model.reduced = lm(log(price)~., data=df.data.drop[,-c(1, idx+2)]);
features.importances = c(features.importances,
adjusted_r_squared_full - summary(model.reduced)$adj.r.squared);
}
feature_names = c(
"Response Rate",
"Superhost",
"Listing Count",
"Neighborhood",
"Property Type",
"Room Type",
"Accommodates",
"Bathrooms",
"Bedrooms",
"Guests Incl.",
"Availability",
"No. Reviews",
"Accuracy",
"Cleanliness",
"Location Score",
"Value Score",
"Reviews / Month"
)
barplot(features.importances, names.arg = feature_names,
ylab = "Improvement to Adj R-Squared",
main = "Feature Importance",las=3)
summary(lm.airbnb)
step(lm.airbnb)
lm.airbnb <- lm(price~ host_is_superhost + neighbourhood_cleansed +
property_type + room_type + accommodates + bathrooms + bedrooms +
beds + bed_type + guests_included + minimum_nights + wifi +
parking + smoke, data=df.data)
summary(lm.airbnb)
anova(lm.airbnb)
lm.airbnb <- lm(price~ bed_type + parking + smoke + host_is_superhost + neighbourhood_cleansed +
property_type + room_type + accommodates + bathrooms + bedrooms +
beds +  guests_included + minimum_nights + wifi
, data=df.data)
anova(lm.airbnb)
summary(lm.airbnb)
lm.airbnb <- lm(price~host_is_superhost + neighbourhood_cleansed +
property_type + room_type + accommodates + bathrooms + bedrooms +
beds +  guests_included + minimum_nights + wifi + bed_type + parking + smoke
, data=df.data)
summary(lm.airbnb)
View(df.data)
summary(df.data$price)
lm.airbnb <- lm(log(price)~host_is_superhost + neighbourhood_cleansed +
property_type + room_type + accommodates + bathrooms + bedrooms +
beds +  guests_included + minimum_nights + wifi + bed_type + parking + smoke
, data=df.data)
summary(df.data$price)
summary(lm.airbnb)
lm.airbnb <- lm(log(price)~host_is_superhost + neighbourhood_cleansed +
property_type + rlevel(room_type, ref="Shared room") + accommodates + bathrooms + bedrooms +
beds +  guests_included + minimum_nights + wifi + bed_type + parking + smoke
, data=df.data)
lm.airbnb <- lm(log(price)~host_is_superhost + neighbourhood_cleansed +
property_type + relevel(room_type, ref="Shared room") + accommodates + bathrooms + bedrooms +
beds +  guests_included + minimum_nights + wifi + bed_type + parking + smoke
, data=df.data)
summary(lm.airbnb)
