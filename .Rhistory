knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
df.data <- read.csv('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data',header=TRUE,sep=',',stringsAsFactors=FALSE)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
df.data <- read.csv(file='D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data',header=TRUE,sep=',',stringsAsFactors=FALSE)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
df.data <- read.csv(file='D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data\\listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type, amenities, guests_included, minimum_nights, number_of_reviews)
#clean data
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
reg1=lm(price~.,data=df.data)
par(mfrow=c(2,2))
plot(reg1)
cook=cooks.distance(reg1)
halfnorm(cook) # 487, 5703
# 487 is removed because it only has 0.11 removed per month and costs $1307 per night.
# 5703 is removed because it has a minimum_nights value of 1000
bad_ids = c(487, 5703)
df.data = df.data[-bad_ids,]
# Remove points with minimum_nights > 15. These dont fall under the category of short term vacation
# rental.
df.data = df.data[df.data$minimum_nights <= 15,]
nrow(df.data)  # 11223
reg <- lm(price~., data=df.data)
cook = cooks.distance(reg)
halfnorm(cook) # 100, 595
# 100 seems normal, but cheap.
# 595 sems normal but more expensive. Stop here
boxcox(reg1,lambda = seq(-0.5,0.5,0.01))
lm.airbnb=lm(log(price)~.,data=df.data)
par(mfrow=c(2,2))
plot(lm.airbnb)
ind=sample(1:11223,7656)
df.train=df.data[ind,]
df.test=df.data[-ind,]
num=0
for(i in 10:16){
num=choose(16,i)+num
}
var.mat=matrix(c(0),nrow = num,ncol=16)
num=1
for(i in 10:16){
commat=combn(16,i)
for(j in 1: choose(16,i)){
var.mat[num,commat[,j]]=rep(1,i)
num=num+1
}
}
score=rep(0,dim(var.mat)[1])
for(i in 1:dim(var.mat)[1]){
l1=lm(log(price)~.,data=df.train[,c(TRUE,var.mat[i,]==1)])
pred=predict.lm(l1,newdata = df.test)
score[i]=sqrt(mean((df.test$price-exp(pred))^2))
}
ind=sample(1:11223,7656)
df.train=df.data[ind,]
df.test=df.data[-ind,]
num=0
for(i in 10:16){
num=choose(16,i)+num
}
var.mat=matrix(c(0),nrow = num,ncol=16)
num=1
for(i in 10:16){
commat=combn(16,i)
for(j in 1: choose(16,i)){
var.mat[num,commat[,j]]=rep(1,i)
num=num+1
}
}
score=rep(0,dim(var.mat)[1])
for(i in 1:dim(var.mat)[1]){
l1=lm(log(price)~.,data=df.train[,c(TRUE,var.mat[i,]==1)])
pred=predict.lm(l1,newdata = df.test)
score[i]=sqrt(mean((df.test$price-exp(pred))^2))
}
df.name=c('price','host_identity_verified','host_has_profile_pic','host_is_superhost',
'neighbourhood_cleansed','property_type','room_type','accommodates','bathrooms','bed_type','wifi','parking' )
lm.airbnb=lm(log(price)~.,data=df.data[,df.name])
summary(lm.airbnb)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
df.data <- read.csv(file='D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data\\listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type, amenities, guests_included, minimum_nights, number_of_reviews)
#clean data
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
knitr::opts_chunk$set(echo = TRUE)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude, color=price),
data = df.data, alpha=0.3)
library(MASS)
library(ggmap)
library(ggplot2)
library(dplyr)
library(faraway)
df.data <- read.csv(file='D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data\\listings.csv',header=TRUE,sep=',',stringsAsFactors=FALSE)
#Reducing to variables of interests
df.map <- dplyr::select(df.data, longitude, latitude, price)
df.data <- dplyr::select(df.data, price, host_is_superhost, host_has_profile_pic, host_identity_verified,
neighbourhood_cleansed, property_type, room_type, accommodates, bathrooms, bedrooms, beds, bed_type, amenities, guests_included, minimum_nights, number_of_reviews)
#clean data
df.data$price <- as.numeric(gsub(",", "", substring(df.data$price,2)))
nrow(df.data)  # 13849
df.data <- df.data[!df.data$host_is_superhost == "",]
nrow(df.data)  # 13813
df.data$host_is_superhost <- factor(df.data$host_is_superhost)
df.data <- df.data[!df.data$host_has_profile_pic=="",]
nrow(df.data) #13813
df.data$host_has_profile_pic <- factor(df.data$host_has_profile_pic)
df.data <- df.data[!df.data$host_identity_verified=="",]
nrow(df.data) #13813
df.data$host_identity_verified <- factor(df.data$host_identity_verified)
df.data = df.data[!df.data$neighbourhood_cleansed == "",]
nrow(df.data)  # 13813
df.data$neighbourhood_cleansed <- factor(df.data$neighbourhood_cleansed)
df.data = df.data[!df.data$property_type == "",]
nrow(df.data)  # 13813
df.data$property_type <- factor(df.data$property_type)
df.data = df.data[!df.data$room_type == "",]
nrow(df.data)  # 13813
df.data$room_type <- factor(df.data$room_type)
df.data = df.data[!df.data$bed_type == "",]
nrow(df.data)  # 13813
df.data$bed_type <- factor(df.data$bed_type)
#Aemnities extraction
#Wireless Internet
df.data$wifi <- 'f'
df.data$wifi[grep("Wireless Internet", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$wifi <- factor(df.data$wifi)
#Free Parking on Premises
df.data$parking <- 'f'
df.data$parking[grep("Free Parking on Premises", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$parking <- factor(df.data$parking)
#Smoking Allowed
df.data$smoke <- 'f'
df.data$smoke[grep("Smoking Allowed", df.data$amenities, ignore.case = TRUE)] <- 't'
df.data$smoke <- factor(df.data$smoke)
#Drop amenities
df.data <- dplyr::select(df.data, -amenities)
# Remove data with null values
for (var in names(df.data)) {
df.data = df.data[!is.na(df.data[,var]),]
}
nrow(df.data)  # 13767
sum(df.data$number_of_reviews == 0)  # 2451
# Listings with no reviews have few stays; their prices may not be indicitive of what they are worth.
df.data = df.data[!df.data$number_of_reviews == 0,]
nrow(df.data)  # 11316
#Drop number of reviews
df.data <- dplyr::select(df.data, -number_of_reviews)
summary(df.data$property_type)
# These types have less than 5 counts
property_types_to_remove = c(
"Bungalow", "Chalet", "Earth House", "Dorm", "Hut", "Tent", "Yurt"
)
df.data = df.data[!df.data$property_type %in% property_types_to_remove,]
nrow(df.data)  # 11304
# Remove listings with accommodates outliers.
df.data <- subset(df.data, !(accommodates > 10 & price < 150))
nrow(df.data)  # 11295
knitr::opts_chunk$set(echo = TRUE)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude, color=price),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude, color='red'),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude, color='blue'),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude, color='blue'),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude, color='red'),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude),
data = df.map, alpha=0.3)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
geom_point(aes(x = longitude, y = latitude),
data = df.map, alpha=0.1)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude),
data = df.map)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=price),
data = df.map)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..price..),
data = df.map)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level..),
data = df.map)
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map) +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon') +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, alpha=..level..),
data = df.map, geom='polygon') +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, alpha=..level..,colour='blue'),
data = df.map, geom='polygon') +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, alpha=..level..,fill='blue'),
data = df.map, geom='polygon') +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon') +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', show.legend = NA) +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5)) + ggtitle("A map of the density of Airbnb listings in Amsterdam")
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5)) + ggtitle("A map of the density of Airbnb listings in Amsterdam") +
guides(fill=guide_legend(title="New Legend Title"))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5)) + ggtitle("A map of the density of Airbnb listings in Amsterdam") +
guides(fill=guide_legend(title="Number of listings"))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5)) + ggtitle("A map of the density of Airbnb listings in Amsterdam") +
guides(fill=guide_legend(alpha="none",title="Number of listings"))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5)) + ggtitle("A map of the density of Airbnb listings in Amsterdam") +
guides(fill=guide_legend(alpha=FALSE, title="Number of listings"))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5)) + ggtitle("A map of the density of Airbnb listings in Amsterdam") +
guides(fill=guide_legend(level=FALSE, title="Number of listings"))
AmsterdamMap <- qmap('amsterdam', zoom = 12)
AmsterdamMap +
stat_density2d(aes(x = longitude, y = latitude, fill=..level.., alpha=..level..),
data = df.map, geom='polygon', na.rm=TRUE) +
scale_alpha_continuous(range=c(0.1,0.5), guide=FALSE) + ggtitle("A map of the density of Airbnb listings in Amsterdam") +
guides(fill=guide_legend(title="Number of listings"))
